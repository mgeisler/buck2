"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1391],{3905:(e,t,r)=>{r.r(t),r.d(t,{MDXContext:()=>p,MDXProvider:()=>d,mdx:()=>x,useMDXComponents:()=>c,withMDXComponents:()=>u});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(){return a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},a.apply(this,arguments)}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),u=function(e){return function(t){var r=c(t.components);return n.createElement(e,a({},t,{components:r}))}},c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(r),d=o,m=u["".concat(l,".").concat(d)]||u[d]||f[d]||a;return r?n.createElement(m,s(s({ref:t},p),{},{components:r})):n.createElement(m,s({ref:t},p))}));function x(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[m]="string"==typeof e?e:o,l[1]=s;for(var p=2;p<a;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},91058:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=r(87462),o=(r(67294),r(3905));const a={id:"ExternalRunnerTestInfo"},l="ExternalRunnerTestInfo",s={unversionedId:"api/build/providers/ExternalRunnerTestInfo",id:"api/build/providers/ExternalRunnerTestInfo",title:"ExternalRunnerTestInfo",description:"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests.",source:"@site/../docs/api/build/providers/ExternalRunnerTestInfo.generated.md",sourceDirName:"api/build/providers",slug:"/api/build/providers/ExternalRunnerTestInfo",permalink:"/docs/api/build/providers/ExternalRunnerTestInfo",draft:!1,tags:[],version:"current",frontMatter:{id:"ExternalRunnerTestInfo"},sidebar:"manualSidebar",previous:{title:"ExecutionPlatformRegistrationInfo",permalink:"/docs/api/build/providers/ExecutionPlatformRegistrationInfo"},next:{title:"InstallInfo",permalink:"/docs/api/build/providers/InstallInfo"}},i={},p=[{value:"command",id:"command",level:2},{value:"contacts",id:"contacts",level:2},{value:"default_executor",id:"default_executor",level:2},{value:"env",id:"env",level:2},{value:"executor_overrides",id:"executor_overrides",level:2},{value:"labels",id:"labels",level:2},{value:"run_from_project_root",id:"run_from_project_root",level:2},{value:"test_type",id:"test_type",level:2},{value:"use_project_relative_paths",id:"use_project_relative_paths",level:2}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,o.mdx)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("h1",{id:"externalrunnertestinfo"},"ExternalRunnerTestInfo"),(0,o.mdx)("p",null,"Provider that signals that a rule can be tested using an external runner. This is the Buck1-compatible API for tests."),(0,o.mdx)("h2",{id:"command"},"command"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'command: [[str.type, ""]]\n')),(0,o.mdx)("p",null,"A Starlark value representing the command for this test. The external test runner is what gives meaning to this command. This is of type [",'[str.type, "_arglike"]',"]"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"contacts"},"contacts"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"contacts: [str.type]\n")),(0,o.mdx)("p",null,"A starlark value representing the contacts for this test. This is largely expected to be an oncall, though it's not validated in any way. This is of type ","[str.type]"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"default_executor"},"default_executor"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'default_executor: "command_executor_config"\n')),(0,o.mdx)("p",null,"Default executor to use to run tests.  This is of type CommandExecutorConfig. If none is passed we will default to the execution platform."),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"env"},"env"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'env: {str.type: ""}\n')),(0,o.mdx)("p",null,"A Starlark value representing the environment for this test. Here again, the external test runner is what will this meaning. This is of type {str.type: _arglike}"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"executor_overrides"},"executor_overrides"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},'executor_overrides: {str.type: "command_executor_config"}\n')),(0,o.mdx)("p",null,"Executors that Tpx can use to override the default executor. This is of type {str.type: CommandExecutorConfig}"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"labels"},"labels"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"labels: [str.type]\n")),(0,o.mdx)("p",null,"A starlark value representing the labels for this test. This is of type ","[str.type]"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"run_from_project_root"},"run_from_project_root"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"run_from_project_root: [bool.type]\n")),(0,o.mdx)("p",null,"Whether this test should run from the project root, as opposed to the cell root. The default is not to. This is of type ","[bool.type]"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"test_type"},"test_type"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"test_type: str.type\n")),(0,o.mdx)("p",null,"A Starlark value representing the type of this test. This is of type str.type"),(0,o.mdx)("hr",null),(0,o.mdx)("h2",{id:"use_project_relative_paths"},"use_project_relative_paths"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-python"},"use_project_relative_paths: [bool.type]\n")),(0,o.mdx)("p",null,"Whether this test should use relative paths. The default is not to. This is of type ","[bool.type]"))}c.isMDXComponent=!0}}]);